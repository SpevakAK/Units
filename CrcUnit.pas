unit CrcUnit;
{$Q-}
interface

uses
  Classes;

type
  TCRCProgress = procedure (const aCurrent, aMax: Int64);

const
  cBufferSize = 64 * 1024;

{=== CRC-32-IEEE 802.3 Polynomial (Reversed) 0xEDB88320 =======================}

procedure CRC32(var aCrc32: Cardinal; BufPtr: Pointer; Len: Cardinal);

Function CRC32Stream(const AStream: TStream; var aCrc32: Cardinal;
  const aBufferSize: Integer = cBufferSize;
  const aProgress: TCRCProgress = nil): Boolean;


{=== CRC-64-ECMA-128 Polynomial (Normal) 0x42F0E1EBA9EA3693 ===================}

procedure crc64(var aCrc64: Int64; aData: PByte; aLen: Cardinal);

Function CRC64Stream(const AStream: TStream; var aCrc64: Int64;
  const aBufferSize: Integer = cBufferSize;
  const aProgress: TCRCProgress = nil): Boolean;


implementation
const
  CRC32Table: array[Byte] of Cardinal =
   ($00000000, $77073096, $EE0E612C, $990951BA,
    $076DC419, $706AF48F, $E963A535, $9E6495A3,
    $0EDB8832, $79DCB8A4, $E0D5E91E, $97D2D988,
    $09B64C2B, $7EB17CBD, $E7B82D07, $90BF1D91,

    $1DB71064, $6AB020F2, $F3B97148, $84BE41DE,
    $1ADAD47D, $6DDDE4EB, $F4D4B551, $83D385C7,
    $136C9856, $646BA8C0, $FD62F97A, $8A65C9EC,
    $14015C4F, $63066CD9, $FA0F3D63, $8D080DF5,

    $3B6E20C8, $4C69105E, $D56041E4, $A2677172,
    $3C03E4D1, $4B04D447, $D20D85FD, $A50AB56B,
    $35B5A8FA, $42B2986C, $DBBBC9D6, $ACBCF940,
    $32D86CE3, $45DF5C75, $DCD60DCF, $ABD13D59,

    $26D930AC, $51DE003A, $C8D75180, $BFD06116,
    $21B4F4B5, $56B3C423, $CFBA9599, $B8BDA50F,
    $2802B89E, $5F058808, $C60CD9B2, $B10BE924,
    $2F6F7C87, $58684C11, $C1611DAB, $B6662D3D,

    $76DC4190, $01DB7106, $98D220BC, $EFD5102A,
    $71B18589, $06B6B51F, $9FBFE4A5, $E8B8D433,
    $7807C9A2, $0F00F934, $9609A88E, $E10E9818,
    $7F6A0DBB, $086D3D2D, $91646C97, $E6635C01,

    $6B6B51F4, $1C6C6162, $856530D8, $F262004E,
    $6C0695ED, $1B01A57B, $8208F4C1, $F50FC457,
    $65B0D9C6, $12B7E950, $8BBEB8EA, $FCB9887C,
    $62DD1DDF, $15DA2D49, $8CD37CF3, $FBD44C65,

    $4DB26158, $3AB551CE, $A3BC0074, $D4BB30E2,
    $4ADFA541, $3DD895D7, $A4D1C46D, $D3D6F4FB,
    $4369E96A, $346ED9FC, $AD678846, $DA60B8D0,
    $44042D73, $33031DE5, $AA0A4C5F, $DD0D7CC9,

    $5005713C, $270241AA, $BE0B1010, $C90C2086,
    $5768B525, $206F85B3, $B966D409, $CE61E49F,
    $5EDEF90E, $29D9C998, $B0D09822, $C7D7A8B4,
    $59B33D17, $2EB40D81, $B7BD5C3B, $C0BA6CAD,

    $EDB88320, $9ABFB3B6, $03B6E20C, $74B1D29A,
    $EAD54739, $9DD277AF, $04DB2615, $73DC1683,
    $E3630B12, $94643B84, $0D6D6A3E, $7A6A5AA8,
    $E40ECF0B, $9309FF9D, $0A00AE27, $7D079EB1,

    $F00F9344, $8708A3D2, $1E01F268, $6906C2FE,
    $F762575D, $806567CB, $196C3671, $6E6B06E7,
    $FED41B76, $89D32BE0, $10DA7A5A, $67DD4ACC,
    $F9B9DF6F, $8EBEEFF9, $17B7BE43, $60B08ED5,

    $D6D6A3E8, $A1D1937E, $38D8C2C4, $04FDFF252,
    $D1BB67F1, $A6BC5767, $3FB506DD, $048B2364B,
    $D80D2BDA, $AF0A1B4C, $36034AF6, $041047A60,
    $DF60EFC3, $A867DF55, $316E8EEF, $04669BE79,

    $CB61B38C, $BC66831A, $256FD2A0, $5268E236,
    $CC0C7795, $BB0B4703, $220216B9, $5505262F,
    $C5BA3BBE, $B2BD0B28, $2BB45A92, $5CB36A04,
    $C2D7FFA7, $B5D0CF31, $2CD99E8B, $5BDEAE1D,

    $9B64C2B0, $EC63F226, $756AA39C, $026D930A,
    $9C0906A9, $EB0E363F, $72076785, $05005713,
    $95BF4A82, $E2B87A14, $7BB12BAE, $0CB61B38,
    $92D28E9B, $E5D5BE0D, $7CDCEFB7, $0BDBDF21,

    $86D3D2D4, $F1D4E242, $68DDB3F8, $1FDA836E,
    $81BE16CD, $F6B9265B, $6FB077E1, $18B74777,
    $88085AE6, $FF0F6A70, $66063BCA, $11010B5C,
    $8F659EFF, $F862AE69, $616BFFD3, $166CCF45,

    $A00AE278, $D70DD2EE, $4E048354, $3903B3C2,
    $A7672661, $D06016F7, $4969474D, $3E6E77DB,
    $AED16A4A, $D9D65ADC, $40DF0B66, $37D83BF0,
    $A9BCAE53, $DEBB9EC5, $47B2CF7F, $30B5FFE9,

    $BDBDF21C, $CABAC28A, $53B39330, $24B4A3A6,
    $BAD03605, $CDD70693, $54DE5729, $23D967BF,
    $B3667A2E, $C4614AB8, $5D681B02, $2A6F2B94,
    $B40BBE37, $C30C8EA1, $5A05DF1B, $2D02EF8D);

  crc64_table: array[Byte] of Int64 = (
    $0000000000000000, $42F0E1EBA9EA3693, $85E1C3D753D46D26, $C711223CFA3E5BB5,
    $493366450E42ECDF, $0BC387AEA7A8DA4C, $CCD2A5925D9681F9, $8E224479F47CB76A,
    $9266CC8A1C85D9BE, $D0962D61B56FEF2D, $17870F5D4F51B498, $5577EEB6E6BB820B,
    $DB55AACF12C73561, $99A54B24BB2D03F2, $5EB4691841135847, $1C4488F3E8F96ED4,
    $663D78FF90E185EF, $24CD9914390BB37C, $E3DCBB28C335E8C9, $A12C5AC36ADFDE5A,
    $2F0E1EBA9EA36930, $6DFEFF5137495FA3, $AAEFDD6DCD770416, $E81F3C86649D3285,
    $F45BB4758C645C51, $B6AB559E258E6AC2, $71BA77A2DFB03177, $334A9649765A07E4,
    $BD68D2308226B08E, $FF9833DB2BCC861D, $388911E7D1F2DDA8, $7A79F00C7818EB3B,
    $CC7AF1FF21C30BDE, $8E8A101488293D4D, $499B3228721766F8, $0B6BD3C3DBFD506B,
    $854997BA2F81E701, $C7B97651866BD192, $00A8546D7C558A27, $4258B586D5BFBCB4,
    $5E1C3D753D46D260, $1CECDC9E94ACE4F3, $DBFDFEA26E92BF46, $990D1F49C77889D5,
    $172F5B3033043EBF, $55DFBADB9AEE082C, $92CE98E760D05399, $D03E790CC93A650A,
    $AA478900B1228E31, $E8B768EB18C8B8A2, $2FA64AD7E2F6E317, $6D56AB3C4B1CD584,
    $E374EF45BF6062EE, $A1840EAE168A547D, $66952C92ECB40FC8, $2465CD79455E395B,
    $3821458AADA7578F, $7AD1A461044D611C, $BDC0865DFE733AA9, $FF3067B657990C3A,
    $711223CFA3E5BB50, $33E2C2240A0F8DC3, $F4F3E018F031D676, $B60301F359DBE0E5,
    $DA050215EA6C212F, $98F5E3FE438617BC, $5FE4C1C2B9B84C09, $1D14202910527A9A,
    $93366450E42ECDF0, $D1C685BB4DC4FB63, $16D7A787B7FAA0D6, $5427466C1E109645,
    $4863CE9FF6E9F891, $0A932F745F03CE02, $CD820D48A53D95B7, $8F72ECA30CD7A324,
    $0150A8DAF8AB144E, $43A04931514122DD, $84B16B0DAB7F7968, $C6418AE602954FFB,
    $BC387AEA7A8DA4C0, $FEC89B01D3679253, $39D9B93D2959C9E6, $7B2958D680B3FF75,
    $F50B1CAF74CF481F, $B7FBFD44DD257E8C, $70EADF78271B2539, $321A3E938EF113AA,
    $2E5EB66066087D7E, $6CAE578BCFE24BED, $ABBF75B735DC1058, $E94F945C9C3626CB,
    $676DD025684A91A1, $259D31CEC1A0A732, $E28C13F23B9EFC87, $A07CF2199274CA14,
    $167FF3EACBAF2AF1, $548F120162451C62, $939E303D987B47D7, $D16ED1D631917144,
    $5F4C95AFC5EDC62E, $1DBC74446C07F0BD, $DAAD56789639AB08, $985DB7933FD39D9B,
    $84193F60D72AF34F, $C6E9DE8B7EC0C5DC, $01F8FCB784FE9E69, $43081D5C2D14A8FA,
    $CD2A5925D9681F90, $8FDAB8CE70822903, $48CB9AF28ABC72B6, $0A3B7B1923564425,
    $70428B155B4EAF1E, $32B26AFEF2A4998D, $F5A348C2089AC238, $B753A929A170F4AB,
    $3971ED50550C43C1, $7B810CBBFCE67552, $BC902E8706D82EE7, $FE60CF6CAF321874,
    $E224479F47CB76A0, $A0D4A674EE214033, $67C58448141F1B86, $253565A3BDF52D15,
    $AB1721DA49899A7F, $E9E7C031E063ACEC, $2EF6E20D1A5DF759, $6C0603E6B3B7C1CA,
    $F6FAE5C07D3274CD, $B40A042BD4D8425E, $731B26172EE619EB, $31EBC7FC870C2F78,
    $BFC9838573709812, $FD39626EDA9AAE81, $3A28405220A4F534, $78D8A1B9894EC3A7,
    $649C294A61B7AD73, $266CC8A1C85D9BE0, $E17DEA9D3263C055, $A38D0B769B89F6C6,
    $2DAF4F0F6FF541AC, $6F5FAEE4C61F773F, $A84E8CD83C212C8A, $EABE6D3395CB1A19,
    $90C79D3FEDD3F122, $D2377CD44439C7B1, $15265EE8BE079C04, $57D6BF0317EDAA97,
    $D9F4FB7AE3911DFD, $9B041A914A7B2B6E, $5C1538ADB04570DB, $1EE5D94619AF4648,
    $02A151B5F156289C, $4051B05E58BC1E0F, $87409262A28245BA, $C5B073890B687329,
    $4B9237F0FF14C443, $0962D61B56FEF2D0, $CE73F427ACC0A965, $8C8315CC052A9FF6,
    $3A80143F5CF17F13, $7870F5D4F51B4980, $BF61D7E80F251235, $FD913603A6CF24A6,
    $73B3727A52B393CC, $31439391FB59A55F, $F652B1AD0167FEEA, $B4A25046A88DC879,
    $A8E6D8B54074A6AD, $EA16395EE99E903E, $2D071B6213A0CB8B, $6FF7FA89BA4AFD18,
    $E1D5BEF04E364A72, $A3255F1BE7DC7CE1, $64347D271DE22754, $26C49CCCB40811C7,
    $5CBD6CC0CC10FAFC, $1E4D8D2B65FACC6F, $D95CAF179FC497DA, $9BAC4EFC362EA149,
    $158E0A85C2521623, $577EEB6E6BB820B0, $906FC95291867B05, $D29F28B9386C4D96,
    $CEDBA04AD0952342, $8C2B41A1797F15D1, $4B3A639D83414E64, $09CA82762AAB78F7,
    $87E8C60FDED7CF9D, $C51827E4773DF90E, $020905D88D03A2BB, $40F9E43324E99428,
    $2CFFE7D5975E55E2, $6E0F063E3EB46371, $A91E2402C48A38C4, $EBEEC5E96D600E57,
    $65CC8190991CB93D, $273C607B30F68FAE, $E02D4247CAC8D41B, $A2DDA3AC6322E288,
    $BE992B5F8BDB8C5C, $FC69CAB42231BACF, $3B78E888D80FE17A, $7988096371E5D7E9,
    $F7AA4D1A85996083, $B55AACF12C735610, $724B8ECDD64D0DA5, $30BB6F267FA73B36,
    $4AC29F2A07BFD00D, $08327EC1AE55E69E, $CF235CFD546BBD2B, $8DD3BD16FD818BB8,
    $03F1F96F09FD3CD2, $41011884A0170A41, $86103AB85A2951F4, $C4E0DB53F3C36767,
    $D8A453A01B3A09B3, $9A54B24BB2D03F20, $5D45907748EE6495, $1FB5719CE1045206,
    $919735E51578E56C, $D367D40EBC92D3FF, $1476F63246AC884A, $568617D9EF46BED9,
    $E085162AB69D5E3C, $A275F7C11F7768AF, $6564D5FDE549331A, $279434164CA30589,
    $A9B6706FB8DFB2E3, $EB46918411358470, $2C57B3B8EB0BDFC5, $6EA7525342E1E956,
    $72E3DAA0AA188782, $30133B4B03F2B111, $F7021977F9CCEAA4, $B5F2F89C5026DC37,
    $3BD0BCE5A45A6B5D, $79205D0E0DB05DCE, $BE317F32F78E067B, $FCC19ED95E6430E8,
    $86B86ED5267CDBD3, $C4488F3E8F96ED40, $0359AD0275A8B6F5, $41A94CE9DC428066,
    $CF8B0890283E370C, $8D7BE97B81D4019F, $4A6ACB477BEA5A2A, $089A2AACD2006CB9,
    $14DEA25F3AF9026D, $562E43B4931334FE, $913F6188692D6F4B, $D3CF8063C0C759D8,
    $5DEDC41A34BBEEB2, $1F1D25F19D51D821, $D80C07CD676F8394, $9AFCE626CE85B507
    );

function PointerSeek(const ASource: Pointer; const N: Integer): Pointer; inline;
var i: Cardinal;
Begin
  i:= Cardinal(ASource);
  Inc(i, n);
  Result:= Pointer(i);
End;


{=== CRC-32-IEEE 802.3 ========================================================}

procedure CRC32(var aCrc32: Cardinal; BufPtr: Pointer; Len: Cardinal);
var
  index: Integer;
  i: Cardinal;
begin
  for i := 0 to Len - 1 do
  begin
   // index := (aCrc32 xor Cardinal(Pointer(BufPtr + i)^)) and $000000FF;
    index := (aCrc32 xor Cardinal(PointerSeek(BufPtr, i)^)) and $000000FF;
    aCrc32 := (aCrc32 shr 8) xor CRC32Table[index];
  end;
end;

Function CRC32Stream(const AStream: TStream; var aCrc32: Cardinal;
  const aBufferSize: Integer; const aProgress: TCRCProgress): Boolean;

  procedure _Progress(const aCurrent, aMax: Int64);
  Begin
   if Assigned(aProgress) then
    aProgress(aCurrent, aMax);
  end;

var
  iCount: Integer;
  aBuffer: PByte;
Begin
  aCrc32 := 0;
  Result := Assigned(AStream);
  if not Result then Exit;

  GetMem(aBuffer, aBufferSize);
  aCrc32 := $ffffffff;
  try
    try
      AStream.Position := 0;
      iCount := AStream.Read(aBuffer^, cBufferSize);
      while (iCount <> 0) do
      begin
        _Progress(AStream.Position, AStream.Size);
        Crc32(aCrc32, aBuffer, iCount);
        iCount := AStream.Read(aBuffer^, cBufferSize);
      end; // while
      aCrc32 := aCrc32 xor $ffffffff;

    finally
      FreeMem(aBuffer);
    end; // try

  except
    Result := False;
  end; // try

End;


{=== CRC-64-ECMA Polynomial (Normal) 0x42F0E1EBA9EA3693 =======================}

procedure crc64(var aCrc64: Int64; aData: PByte; aLen: Cardinal);
var iData: PByte;
    iLen, index: Cardinal;
Begin
  iData:= aData;
  iLen:= aLen;

  while (iLen > 0) do
  Begin
   index := ( (aCrc64 shr 56) xor iData^) and $FF;
   aCrc64 := crc64_table[index] xor (aCrc64 shl 8);

   Inc(iData);
   Dec(iLen);
  end;//while
end;

Function CRC64Stream(const AStream: TStream; var aCrc64: Int64;
  const aBufferSize: Integer; const aProgress: TCRCProgress): Boolean;

  procedure _Progress(const aCurrent, aMax: Int64);
  Begin
   if Assigned(aProgress) then
    aProgress(aCurrent, aMax);
  end;

var
  iCount: Integer;
  aBuffer: PByte;
Begin
  aCrc64 := 0;
  Result := Assigned(AStream);
  if not Result then Exit;

  GetMem(aBuffer, aBufferSize);
  aCrc64 := $ffffffff;
  try
    try
      AStream.Position := 0;
      iCount := AStream.Read(aBuffer^, cBufferSize);
      while (iCount <> 0) do
      begin
        _Progress(AStream.Position, AStream.Size);
        crc64(aCrc64, aBuffer, iCount);
        iCount := AStream.Read(aBuffer^, cBufferSize);
      end; // while
      aCrc64 := aCrc64 xor $ffffffff;

    finally
      FreeMem(aBuffer);
    end; // try

  except
    Result := False;
  end; // try

End;



end.
